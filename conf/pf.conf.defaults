[general]
#
# general.domain
#
# Domain name of PacketFence system.
domain=packetfence.org
#
# general.hostname
#
# Hostname of PacketFence system.  This is concatenated with the domain in Apache rewriting rules and therefore must be resolvable by clients.
hostname=packetfence
#
# general.dnsservers
#
# Comma-delimited list of DNS servers.  Passthroughs are created to allow queries to these servers from even "trapped" nodes.
dnsservers=127.0.0.1
#
# general.dhcpservers
#
# Comma-delimited list of DHCP servers.  Passthroughs are created to allow DHCP transactions from even "trapped" nodes.
dhcpservers=127.0.0.1
#
# general.timezone
#
# System's timezone in string format. Supported list:
# http://www.php.net/manual/en/timezones.php
timezone=America/Montreal

[network]
#
# network.dhcpdetector
#
# If enabled, PacketFence will monitor DHCP-specific items such as rogue DHCP services, DHCP-based OS fingerprinting, computername/hostname 
# resolution, and (optionnally) option-82 location-based information.  The monitored DHCP packets are DHCPDISCOVERs and DHCPREQUESTs - both are broadcasts, 
# meaning a span port is not necessary.  This feature is highly recommended if the internal network is DHCP-based.
dhcpdetector=enabled
#
# network.rogue_dhcp_detection
#
# Tries to identify Rogue DHCP Servers and triggers the 1100010 violation if one is found.
# This feature is only available if the dhcpdetector is activated.
rogue_dhcp_detection=enabled
#
# network.rogueinterval
#
# When rogue DHCP server detection is enabled, this parameter defines how often to email administrators.  With its default 
# setting of 10, it will email administrators the details of the previous 10 DHCP offers.
rogueinterval=10
#
# network.hostname_change_detection
#
# Will identify hostname changes and send an e-mail with these changes.
# This can help detect MAC spoofing.
hostname_change_detection=disabled
#
# network.dhcpoption82logger
#
# If enabled PacketFence will monitor DHCP option82 location-based information.
# This feature is only available if the dhcpdetector is activated.
dhcpoption82logger=disabled
#
# network.dhcp_filter_by_message_types
#
# Which dhcp message types are being listened by the pfdhcplistener.
# Do not change unless you know what you are doing
dhcp_filter_by_message_types=DHCPOFFER,DHCPREQUEST,DHCPDECLINE,DHCPACK,DHCPRELEASE
#
# network.force_listener_update_on_ack
#
# This will only do the iplog update and other DHCP related task on a DHCPACK.
# You need to make sure the UDP reflector is in place so this works on the production network.
# This is implicitly activated on registration interfaces on which dhcpd runs.
force_listener_update_on_ack=disabled
#
# network.interfaceSNAT
# Choose interface(s) where you want to enable snat for passthrough (by default it's the management interface)
interfaceSNAT=
#
#
# This section allows you to configure locally proxied content.  We typically use this to proxy tools like Stinger rather 
# than having to continually download the latest version. Ex:
# 
# <i>tools/stinger.exe=http://download.nai.com/products/mcafee-avert/stng260.exe</i>
# 
# The Stinger utility could then be accessed at https://pfhostname/proxies/tools/stinger.exe.
[proxies]
tools/stinger.exe=http://download.nai.com/products/mcafee-avert/stng260.exe

[trapping]
#
# trapping.registration
#
# If enabled, nodes will be required to register on first network access.  Further registration options are configured in the 
# registration section.
registration=enabled
#
# trapping.redirtimer
#
# How long to display the progress bar during trap release. Default value is 
# based on VLAN enforcement techniques. Inline enforcement only users could
# lower the value.
redirtimer=20s
# 
# trapping.wait_for_redirect
#
# How many seconds should the WebAPI sleep before actually triggering the VLAN change.
# This is meant to give the device enough time to fetch the redirection page before 
# switching VLAN.
wait_for_redirect = 1
#
# trapping.whitelist
#
# Comma-delimited list of MAC addresses that are immune to isolation. In 
# inline level 2 enforcement, the firewall is opened for them as if they were 
# registered. This "feature" will probably be reworked in the future.
whitelist=
#
# trapping.detection
#
# Enables snort-based worm detection.  If you don't have a span interface available, don't bother enabling it.  If you do, 
# you'll most definately want this on.
detection=disabled

#
# trapping.detection_engine
#
# Let you choose from our supported IDS: snort or suricata
#
detection_engine=snort
#
# trapping.range
#
# Comma-delimited list of address ranges/CIDR blocks that Snort/Suricata will monitor/detect/trap on.  Gateway, network, and 
# broadcast addresses are ignored.
range=

#
# trapping.wireless_ips
#
# Enable wids trapping detection
wireless_ips=disabled

#
# Set the threshold for wids
#
wireless_ips_threshold=90

#
# trapping.passthrough
#
# When enabled, pfdns will resolve the real IP addresses of passthroughs and add them in the ipset session to give access
# to trapped devices. DonÂ´t forget to enable ip_forward on your server.
passthrough=disabled
#
# trapping.passthroughs
#
# Comma-delimited list of domains to be used as HTTP and HTTPS passthroughs to web sites.
#
passthroughs=
#
# trapping.proxy_passthroughs
#
# Comma-delimited list of domains to be use for apache passthrough
proxy_passthroughs=crl.geotrust.com,ocsp.geotrust.com,crl.thawte.com,ocsp.thawte.com,crl.comodoca.com,ocsp.comodoca.com,crl.incommon.org,ocsp.incommon.org,crl.usertrust.com,ocsp.usertrust.com,mscrl.microsoft.com,crl.microsoft.com,ocsp.apple.com,ocsp.digicert.com,ocsp.entrust.com,srvintl-crl.verisign.com,ocsp.verisign.com,ctldl.windowsupdate.com,crl.globalsign.net,pki.google.com,www.microsoft.com,crl.godaddy.com,ocsp.godaddy.com,certificates.godaddy.com,crl.globalsign.com,secure.globalsign.com
#
# trapping.interception_proxy
#
# When enabled, packetfence will intercept proxy request to somes specified port
interception_proxy=disabled
#
# trapping.interception_proxy_port
#
# Comma-delimited list of port used to intercept proxy traffic
interception_proxy_port=8080,3128


[registration]
#
# registration.button_text
#
#
button_text=Register
#
# registration.device_registration
#
# Enable or Disable the ability to register a gaming device using the specific portal page designed to do it
device_registration=disabled
#
# registration.device_registration_role
#
# The role to assign to gaming devices. If none is specified, the role of the registrant is used.
device_registration_role=

[guests_admin_registration]
#
# guests_admin_registration.access_duration_choices
#
# These are all the choices offered in the guest management interface as 
# possible access duration values for a given registration.
access_duration_choices=1h,3h,12h,1D,2D,3D,5D
#
# guests_admin_registration.default_access_duration
#
# This is the default access duration value selected in the dropdown on the 
# guest management interface.
default_access_duration=12h

[alerting]
#
# alerting.emailaddr
#
# Email address to which notifications of rogue DHCP servers, violations with an action of "email", or any other 
# PacketFence-related message goes to.
emailaddr=pf@localhost
#
# alerting.fromaddr
#
# Source email address for email notifications. Empty means root@<server-domain-name>.
fromaddr=
#
# alerting.smtpserver
#
# Server through which to send messages to the above emailaddr.  The default is localhost - be sure you're running an SMTP 
# host locally if you don't change it!
smtpserver=localhost
#
# alerting.subjectprefix
#
#Subject prefix for email notifications of rogue DHCP servers, violations with an action of "email", or any other
#PacketFence-related message.
subjectprefix=PF Alert:
#
# alerting.log
#
# Log file where "log" actions are sent.
log=violation.log

[ports]
#
# ports.admin
#
# Port the administrative interface listens on.
admin=1443
#
# ports.soap
#
# Port of the soap interface listens on.
soap=9090
#
# ports.aaa
#
# Port of the aaa http interface listens on.
aaa=7070
#
#port.pf_status
#
# Port of the packetfence status http interface listends on.
pf_status=9191
#
# ports.httpd_portal_modstatus
#
# Port the mod_status for httpd.portal listens on.
httpd_portal_modstatus=1444

[scan]
#
# scan.engine
#
# Which scan engine to use to perform client-side policy compliance.
engine=none
#
# scan.registration
#
# If this option is enabled, the PF system will scan each host after
# registration is complete.
registration=disabled
#
# scan.duration
#
# Approximate duration of a scan. User being scanned on registration are presented a progress bar 
# for this duration, afterwards the browser refreshes until scan is complete.
duration=60s
#
# scan.host
#
# Host the scanning engine is running on.  For performance reasons, we
# recommend running the scanning engine on a remote server. A passthrough will
# be automagically created.
host=127.0.0.1
#
# scan.user
#
# Username to log into scanning engine with.
user=admin
#
# scan.pass
#
# Password to log into scanning engine with.
pass=packet
#
# scan.nessus_port
#
# Remote port of the Nessus scanning engine. Default value should be fine in
# most cases.
nessus_port=8834
#
# scan.nessus_clientpolicy
#
# Name of the remote policy on the nessus server
nessus_clientpolicy=Internal Network Scan
#
# scan.openvas_port
#
# Remote port of the OpenVAS scanning engine. Default value should be fine in
# most cases.
openvas_port=9390
#
# scan.openvas_configid
#
# ID of the scanning configuration on the OpenVAS server
openvas_configid=
#
# scan.openvas_reportformatid
#
# ID of the .NBE report format on the OpenVAS server
openvas_reportformatid=f5c2a364-47d2-4700-b21d-0a7693daddab

[database]
#
# database.pass
#
# Password for the mysql database used by PacketFence.
pass=packet
#
# database.db
#
# Name of the mysql database used by PacketFence.
db=pf
#
# database.user
#
# Username of the account with access to the mysql database used by PacketFence.
user=pf
#
# database.port
#
# Port the mysql server is running on.
port=3306
#
# database.host
#
# Server the mysql server is running on.
host=localhost

[services]
#
# services.dhcpd
#
# Should DHCPd be managed by PacketFence?
dhcpd=enabled
#
# services.haproxy
#
# Should haproxy be started?
haproxy=enabled
#
# services.haproxy_order
#
# Order in which to start this service 
haproxy_order=01
#
# services.haproxy_binary
#
# Location of the haproxy binary. Only necessary to change if you are not running the RPMed version.
haproxy_binary=/usr/sbin/haproxy
#
# services.pfdns
#
# Should pfdns be managed by PacketFence?
pfdns=enabled
#
# services.pfdns_order
#
# Order in which to start this service 
pfdns_order=17
#
# services.snort
#
# Should snort be managed by PacketFence?
snort=enabled
#
# services.snort_order
#
# Order in which to start this service 
snort_order=80
#
# services.snort_binary
#
# Location of the snort binary. Only necessary to change if you are not running the RPMed version. 
snort_binary=/usr/sbin/snort
#
# services.suricata
#
# Should suricata be managed by PacketFence?
suricata=enabled
#
# services.suricata_order
#
# Order in which to start this service 
suricata_order=80
#
# services.suricata_binary
# 
# Location of the suricata binary.
suricata_binary=/usr/bin/suricata
#
# services.radiusd
#
# Should radiusd be managed by PacketFence?
radiusd=enabled
#
# services.radiusd_order
#
# Order in which to start this service 
radiusd_order=12
# 
# services.radiusd_binary
# 
# Location of the named binary. Only necessary to change if you are not running the RPMed version.
radiusd_binary=/usr/sbin/radiusd
#
# services.iptables
#
# Should iptables be managed by PacketFence?
iptables=enabled
#
# services.iptables_order
#
# Order in which to start this service 
iptables_order=05
# 
# services.iptables_binary
# 
# location of the iptables binary. only necessary to change if you are not running the rpmed version.
iptables_binary=/sbin/iptables
#
# services.pfbandwidthd
#
# Should pfbandwidthd be managed by PacketFence?
pfbandwidthd=disabled
#
# services.pfbandwitdth_order
#
# Order in which to start this service 
pfbandwidthd_order=89
#
# services.httpd_admin
#
# Should httpd.admin be started?
httpd_admin=enabled
#
# services.httpd_admin_order
#
# Order in which to start this service 
httpd_admin_order=00
#
# services.httpd_portal
#
# Should httpd.portal be started?
httpd_portal=enabled
#
# services.httpd_portal_order
#
# Order in which to start this service 
httpd_portal_order=20
#
# services.httpd_parking
#
# Should httpd.parking be started?
httpd_parking=enabled
#
# services.httpd_portal_order
#
# Order in which to start this service 
httpd_parking_order=20
#
# services.httpd_webservices
#
# Should httpd.webservices be started?
httpd_webservices=enabled
#
# services.httpd_webservices_order
#
# Order in which to start this service 
httpd_webservices_order=22
#
# services.httpd_aaa
#
# Should httpd.aaa be started?
httpd_aaa=enabled
#
# services.httpd_aaa_order
#
# Order in which to start this service 
httpd_aaa_order=10
#
# services.httpd_proxy
#
# Should httpd.proxy be started?
httpd_proxy=enabled
#
# services.httpd_proxy_order
#
# Order in which to start this service 
httpd_proxy_order=19
#
# services.httpd_graphite
#
# Should httpd.graphite be started?
httpd_graphite=enabled
#
# services.httpd_graphite_order
#
# Order in which to start this service 
httpd_graphite_order=99
#
# services.httpd_binary
#
# Location of the apache binary. Only necessary to change if you are not running the RPMed version.
httpd_binary=/usr/sbin/httpd
#
# services.pfsetvlan
#
# Should pfsetvlan be managed by PacketFence?
pfsetvlan=disabled
#
# services.pfsetvlan_order
#
# Order in which to start this service 
pfsetvlan_order=13
#
# services.snmptrapd
#
# Should snmptrapd be managed by PacketFence?
snmptrapd=disabled
#
# services.snmptrapd_order
#
# Order in which to start this service 
snmptrapd_order=14
#
# services.snmptrapd_binary
#
# Location of the snmptrapd binary. Only necessary to change if you are not using the RPMed version.
snmptrapd_binary=/usr/sbin/snmptrapd
#
# services.pfqueue
#
# Should pfqueue be managed by PacketFence?
pfqueue=enabled
#
# services.pfqueue_order
#
# Order in which to start this service 
pfqueue_order=16
#
# services.pfmon
#
# Should pfmon be managed by PacketFence?
pfmon=enabled
#
# services.pfmon_order
#
# Order in which to start this service 
pfmon_order=51
#
# services.redis_cache
#
# Should redis be managed by PacketFence?
redis_cache=enabled
#
# services.redis_cache_order
#
# Order in which to start this service 
redis_cache_order=00
# services.redis_queue
#
# Should redis be managed by PacketFence?
redis_queue=enabled
#
# services.redis_queue_order
#
# Order in which to start this service 
redis_queue_order=06
# 
# services.redis_binary
# 
# Location of the redis binary. Only necessary to change if you are not running the pre-packaged version.
redis_binary=/usr/bin/redis-server
#
# services.pfdhcplistener
#
# Should pfdhcplistener be started?
pfdhcplistener=enabled
#
# services.pfdhcplistener_order
#
# Order in which to start this service 
pfdhcplistener_order=18
#
# services.keepalived
#
# Should keepalived be started?
keepalived=enabled
#
# services.keepalived_order
#
# Order in which to start this service 
keepalived_order=100
#
# services.keepalived_binary
#
# Location of the keepalived binary. Only necessary to change if you are not running the RPMed version.
keepalived_binary=/usr/sbin/keepalived
# services.winbindd
#
# Should winbindd be started?
winbindd=enabled
#
# services.winbindd_order
#
# Order in which to start this service 
winbindd_order=11
# 
# services.winbindd_binary
# 
# location of the winbindd binary. only necessary to change if you are not running the rpmed version.
winbindd_binary=/usr/sbin/winbindd
# services.carbon-cache
#
# Should carbon-cache be started?
carbon-cache=enabled
#
# services.carbon-cache_order
#
# Order in which to start this service 
carbon-cache_order=90
# 
# services.carbon-cache_binary
# 
# Location of the carbon cache binary. Only necessary to change if you are not running the pre-packaged version.
carbon-cache_binary=/usr/bin/carbon-cache
#
# services.carbon-relay
#
# Should carbon-relay be started?
carbon-relay=enabled
#
# services.carbon-relay_order
#
# Order in which to start this service 
carbon-relay_order=91
# 
# services.carbon-relay_binary
# 
# Location of the carbon relay binary. Only necessary to change if you are not running the pre-packaged version.
carbon-relay_binary=/usr/bin/carbon-relay
#
# services.collectd
#
# Should collectd be started?
collectd=enabled
#
# services.collectd_order
#
# Order in which to start this service 
collectd_order=92
# 
# services.collectd_binary
# 
# Location of the collectd binary. Only necessary to change if you are not running the pre-packaged version.
collectd_binary=/usr/sbin/collectd
#
# services.pfdetect_order
#
# Order in which to start this service 
pfdetect_order=79
#
# services.statsd
#
# Should statsd be started?
statsd=enabled
#
# services.statsd_order
#
# Order in which to start this service 
statsd_order=93
# 
# services.statsd_binary
# 
# Location of the statsd (node) binary. Only necessary to change if you are not running the pre-packaged version.
statsd_binary=/usr/bin/node
#
# services.radsniff
#
# Should radsniff be started?
radsniff=enabled
#
# services.radsniff_order
#
# Order in which to start this service 
radsniff_order=94
# 
# services.radsniff_binary
# 
# Location of the radsniff binary. Only necessary to change if you are not running the pre-packaged version.
radsniff_binary=/usr/bin/radsniff
#
# services.p0f
#
# Should p0f be started?
p0f=enabled
#
# services.p0f_order
#
# Order in which to start this service 
p0f_order=81
# 
# services.p0f_binary
# 
# Location of the p0f binary. Only necessary to change if you are not running the pre-packaged version.
p0f_binary=/usr/local/bin/p0f
#
# services.openssl_binary
#
# Location of the openssl binary. Only necessary to change if you are not running the RPMed version.
openssl_binary=/usr/bin/openssl
# 
# services.arp_binary
# 
# location of the arp binary. only necessary to change if you are not running the rpmed version.
arp_binary=/sbin/arp

[vlan]
#
# vlan.closelocationlogonstop
#
# Should open locationlog entries be closed when pfsetvlan is 
# stopped
closelocationlogonstop=disabled
#
#
# vlan.nbtraphandlerthreads
#
# Number of trap handler threads pfsetvlan should start
nbtraphandlerthreads = 5
#
# vlan.nbtrapparserthreads
#
# Number of trap parser threads pfsetvlan should start
nbtrapparserthreads = 3
#
# vlan.bounce_duration
#
# Delay to wait between the shut / no-shut on a port. Some OS need a higher value than others.
# Default should be reasonable for almost every OS but is too long for the usual proprietary OS.
bounce_duration = 4s
#
# vlan.trap_limit
#
# Controls whether or not the trap_limit feature is enabled. Trap limiting is
# a way to limit the damage done by malicious users or misbehaving switch 
# that sends too many traps to PacketFence causing it to be overloaded. Trap
# limiting is controlled by the trap_limit_threshold and trap_limit_action 
# parameters. Default is enabled.
trap_limit = enabled
#
# vlan.trap_limit_threshold
#
# Maximum number of SNMP traps that a switchport can send to PacketFence within
# a minute without being flagged as DoS. Defaults to 100
trap_limit_threshold = 100
#
# vlan.trap_limit_action
#
# Action that PacketFence will take if the vlan.trap_limit_threshold is reached.
# Defaults to none. email will send an email every hour if the limit's still reached.
# shut will shut the port on the switch and will also send an email even if email is not
# specified.
trap_limit_action = 

[inline]
#
# inline.ports_redirect
#
# Ports to intercept and redirect for trapped and unregistered systems.  Defaults to 80/tcp (HTTP), 443/tcp (HTTPS).
# Redirecting 443/tcp (SSL) will work, although users might get certificate errors if you didn't install a valid 
# certificate or if you don't use DNS (although IP-based certificates supposedly exist)
# Redirecting 53/udp (DNS) seems to have issues and is also not recommended.
# We also have experimental IMAP and POP3 listeners which give fake emails telling users to open their browsers.
# Enable them via the ports.listeners parameter and add the IMAP (143/tcp) and POP3 (110/tcp) here.
ports_redirect=80/tcp,443/tcp
#
# inline.should_reauth_on_vlan_change
# Should have to reauthenticate the node if it change vlan
should_reauth_on_vlan_change = disabled
#
# inline.interfaceSNAT
# Choose the interface(s) you want to use to enable snat (by default itÂ´s the management interface)
interfaceSNAT=

# inline.accounting
#
# Should we handle accouting data for inline clients?
# This controls inline accouting tasks in pfmon.
accounting = disabled

# inline.layer3_accounting_session_timeout
#
# Accounting 'sessions' created by pfbandwidthd (level 3 traffic only) that haven't been updated for more than this
# amount of seconds will be considered inactive.
# This should be higher than the interval at which pfmon runs
# Defaults to 300 - 5 minutes
layer3_accounting_session_timeout = 300

# inline.layer3_accounting_sync_interval
#
# Interval at which pfbandwidthd (level 3 traffic only) should dump collected information into the database.
# This should be lower than the interval at which pfmon runs
# Defaults to 41 seconds
layer3_accounting_sync_interval = 41

[servicewatch]
#
# servicewatch.email
#
# Should pfcmd service pf watch send an email if services are not running?
# You must make sure to call the watch command. Installing it in the cron is the
# recommended approach:
# */5 * * * * /usr/local/pf/bin/pfcmd service pf watch
email=enabled
#
# servicewatch.restart
#
# Should pfcmd service pf watch restart PF if services are not running?
# You must make sure to call the watch command. Installing it in the cron is the
# recommended approach:
# */5 * * * * /usr/local/pf/bin/pfcmd service pf watch
restart=disabled

[captive_portal]
#
# captive_portal.network_detection
#
# Enable or not the network detection feature after registration
network_detection=enabled
#
# captive_portal.network_detection_ip
#
# This IP is used as the webserver who hosts the common/network-access-detection.gif which is used to detect if network
# access was enabled. 
# It cannot be a domain name since it is used in registration or quarantine where DNS is blackholed.
# It is recommended that you allow your users to reach your packetfence server and put your LAN's PacketFence IP.
# By default we will make this reach PacketFence's website as an easy solution.
#
network_detection_ip = 192.95.20.194
#
# captive_portal.image_path
#
# This is the path where the gif is on the webserver to detect if the network access
# has been enabled.
image_path = /common/network-access-detection.gif
#
# captive_portal.loadbalancers_ip
#
# If the captive portal is put behind load-balancer(s) that act at Layer 7 
# (HTTP level) effectively doing reverse proxying then the captive portal no 
# longer sees the IP of the node trying to access the portal. In that case,
# the load-balancers must do SSL offloading and add a X-Forwarded-By header
# in the HTTP traffic they forward to PacketFence. Most do by default. Then
# in this parameter you must specify the IP of the various load balancers.
# This will instruct the captive portal to look for client IPs in the 
# X-Forwarded-For instead of the actual TCP session when it matches an IP
# in the list. Format is a comma separated list of IPs. Note: Apache access
# log format is not changed to automatically log the X-Forwarded-By header.
# Modify conf/httpd.conf.d/captive-portal-common.conf to use 
# loadbalanced_combined instead of combined in CustomLog statement.
loadbalancers_ip=
#
# captive_portal.secure_redirect
#
# If secure_redirect is enabled, the captive portal uses HTTPS when redirecting
# captured clients. This is the default behavior.
secure_redirect=enabled
#
# captive_portal.status_only_on_production
#
# If status_only_on_production is enabled, the /status page will only be available on the
# production network. This is disabled by default
status_only_on_production=disabled
#
# captive_portal.detection_mecanism_bypass
#
# Bypass the captive-portal detection mecanism of some browsers / end-points by proxying the detection request.
detection_mecanism_bypass = disabled
#
# captive_portal.detection_mecanism_urls
#
# Comma-delimited list of URLs known to be used by devices to detect the presence 
# of a captive portal and trigger their captive portal mecanism.
detection_mecanism_urls = http://www.gstatic.com/generate_204,http://clients3.google.com/generate_204,http://www.apple.com/library/test/success,http://connectivitycheck.android.com/generate_204,http://www.msftncsi.com/ncsi.txt
#
# captive_portal.wispr_redirection
#
# Enable or disable WISPr redirection capabilities on the captive-portal
wispr_redirection = enabled

# captive_portal.httpd_mod_qos
#
# Enable mod_qos for the captive-portal
httpd_mod_qos=disabled
#
# captive_portal.httpd_mod_qos_maximum_users
#
# The maximum number of connections per device
httpd_mod_qos_maximum_connections_per_device=5
#
# captive_portal.httpd_mod_evasive
#
# Enable mod_evasive for the captive-portal
httpd_mod_evasive=disabled
#
# captive_portal.httpd_mod_evasive_white_list
#
# Comma delimited IP addresses or networks CIDR format of trusted clients can be added to the whitelist to ensure they are never denied.
httpd_mod_evasive_white_list=127.0.0.1
#
# captive_portal.httpd_mod_evasive_hash_table_size
#
# The hash table size defines the number of top-level nodes for each child's hash table. Increasing this number will provide faster performance by decreasing the number of iterations required to get to the record, but consume more memory for table space. You should increase this if you have a busy web server.
httpd_mod_evasive_hash_table_size=3097
#
# captive_portal.httpd_mod_evasive_page_count
#
# This is the limit for the number of requests for the same page per page interval by an IP address. Once the threshold for that interval has been exceeded, the IP address of the client will be added to the blocked list.
httpd_mod_evasive_page_count=5
#
# captive_portal.httpd_mod_evasive_page_interval
#
# The interval in seconds for the page count threshold.
httpd_mod_evasive_page_interval=2
#
# captive_portal.httpd_mod_evasive_site_count
#
# The limit for the total number of requests for the portal by an IP address per site interval.
httpd_mod_evasive_site_count=20
#
# captive_portal.httpd_mod_evasive_site_interval
#
# The interval in seconds for the site count threshold
httpd_mod_evasive_site_interval=1
#
# captive_portal.httpd_mod_evasive_blocking_period
#
# The amount of time (in seconds) that a client will be blocked for if they are added to the blocking list. During this time, all subsequent requests from the client will result in a 403 (Forbidden) and the timer being reset (e.g. another 10 seconds). Since the timer is reset for every subsequent request, it is not necessary to have a long blocking period; in the event of a DoS attack, this timer will keep getting reset.
httpd_mod_evasive_blocking_period=10
#
# captive_portal.httpd_mod_evasive_email_notify
#
# If this value is set, an email will be sent to the address specified whenever an IP address becomes blacklisted.
httpd_mod_evasive_email_notify=
#
# captive_portal.httpd_mod_evasive_system_command
#
# If this value is set, the system command specified will be executed whenever an IP address becomes blacklisted. This is designed to enable system calls to ip filter or other tools. A locking mechanism using /tmp prevents continuous system calls. Use %s to denote the IP address of the blacklisted IP, use %t to use the mod_evasive blocking period value. The default value will insert the device ip in ipset session for 10 seconds and deny the access to the portal.
httpd_mod_evasive_system_command="sudo ipset add portal_deny %s timeout %t ; rm -fr /usr/local/pf/logs/dos-%s"

[advanced]
#
# advanced.reevaluate_access_reasons
#
# After which calls to pfcmd do we have to re-evaluate the state of a node and re-assign VLAN or change iptables rules
reevaluate_access_reasons=node_modify,manage_register,manage_deregister,manage_vclose,manage_vopen,violation_modify,violation_add,violation_delete,redir.cgi,pfcmd_vlan,admin_modify
#
# advanced.sso_on_access_reevaluation
#
# Trigger Single-Sign-On (Firewall SSO) on access reevaluation
sso_on_access_reevaluation=disabled
#
# advanced.record_accounting_in_sql
#
# Record the accounting data in the SQL tables.
# Requires a restart of radiusd to be effective.
record_accounting_in_sql=enabled
#
# advanced.pfcmd_error_color
#
# Color of the error text for pfcmd
pfcmd_error_color=red
#
# advanced.pfcmd_warning_color
#
# Color of the warning text for pfcmd
pfcmd_warning_color=yellow
#
# advanced.pfcmd_success_color
#
# Color of the success text for pfcmd
pfcmd_success_color=green
#
# advanced.hash_passwords
#
# The algorithm to use to hash the passwords in the local database.
hash_passwords=bcrypt
#
# advanced.hashing_cost
#
# The cost factor to apply to the password hashing if applicable.
# Currently only applies to bcrypt.
hashing_cost=8
#
# advanced.disable_pf_domain_auth
#
# Disable Active-Directory domain configuration from within PacketFence
disable_pf_domain_auth=disabled
#
# advanced.ldap_attributes
#
# List of LDAP attributes that can be used in the sources configuration
ldap_attributes=uid,cn,department,displayName,distinguishedName,givenName,memberOf,sn,eduPersonPrimaryAffiliation,mail,postOfficeBox,description,groupMembership
#
# advanced.pfdns_processes
#
# Amount of pfdns processes to start
pfdns_processes=4
#
# advanced.update_iplog_with_accounting
#
# Use the information included in the accounting to update the iplog
update_iplog_with_accounting=disabled
#
# advanced.locationlog_close_on_accounting_stop
#
# Close the locationlog for a node on accounting stop
locationlog_close_on_accounting_stop=enabled
#
# advanced.timing_stats_level
#
# Level of timing stats to keep - 0 is the lowest - 10 the highest amount to log
# Do not change unless you know what you are doing
timing_stats_level=5
#
# advanced.pfdhcplistener_packet_size
#
# Set the max size of DHCP packets
# Do not change unless you know what you are doing
pfdhcplistener_packet_size=576

[provisioning]
#
# provisioning.autoconfig
#
# Enable or disable the XML mobile config generation for wireless on iPhones, iPods, and iPads
autoconfig = disabled

#
# provisioning.ssid
#
# SSID name where the users need to connect to upon registration
ssid = SSID-Hidden

#
# provisioning.category
#
# Accessible to node that are member of this category
category = any

#
# provisioning.certificate
#
# Certificate to send to the node
certificate = 

[node_import]
#
# node_import.pid
#
# Default pid value to assign to imported nodes.
pid=default
#
# node_import.category
#
# Default category to assign to imported nodes.
category=default
#
# node_import.voip
#
# By default is an imported node a Voice over IP device or not?
voip=no

[webservices]
#
# webservices.user
#
# username to use to connect to the webAPI
user =
#
# webservices.pass
#
# password of the username
pass =
#
# webservices.host
#
# host of the webAPI
host=127.0.0.1
#
# webservices.proto
#
# proto to use
proto=http
#
# webservices.port
#
# port to use
port=9090
#
# webservices.aaa_port
#
# port to use for authentication
aaa_port=7070

[maintenance]
#
# maintenance.iplog_rotation_window
#
# How long to keep iplog_history entry before rotating it to iplog_archive
iplog_rotation_window=1W
#
# maintenance.iplog_rotation_interval
#
# At which interval to run the iplog_history rotation job
iplog_rotation_interval=60s
#
# maintenance.iplog_rotation_batch
#
# How many iplog_history entries to rotate in one job
iplog_rotation_batch=100
#
# maintenance.iplog_rotation_timeout
#
# How long a iplog_history rotation job can take before being killed
iplog_rotation_timeout=10s
#
# maintenance.iplog_cleanup_window
#
# How long to keep a iplog_archive entry before deleting it
iplog_cleanup_window=0D
#
# maintenance.iplog_cleanup_interval
#
# At which interval to run the iplog_archive cleanup job
iplog_cleanup_interval=60s
#
# maintenance.iplog_cleanup_batch
#
# How many iplog_archive entries to clean up in one job
iplog_cleanup_batch=100
#
# maintenance.iplog_cleanup_timeout
#
# How long a iplog_archive cleanup job can take before being killed
iplog_cleanup_timeout=10s
#
# maintenance.locationlog_cleanup_window
#
# How long to keep a locationlog entry before deleting it
locationlog_cleanup_window=0D
#
# maintenance.locationlog_cleanup_interval
#
# At which interval to run the locationlog cleanup job
locationlog_cleanup_interval=60s
#
# maintenance.locationlog_cleanup_batch
#
# How many locationlog entries to clean up in one job
locationlog_cleanup_batch=100
#
# maintenance.locationlog_cleanup_timeout
#
# How long a locationlog cleanup job can take before being killed
locationlog_cleanup_timeout=10s
#
# maintenance.traplog_cleanup_window
#
# How long to keep a traplog entry before deleting it
traplog_cleanup_window=0D
#
# maintenance.traplog_cleanup_interval
#
# At which interval to run the traplog cleanup job
traplog_cleanup_interval=60s
#
# maintenance.radius_audit_log_cleanup_window
#
# How long to keep a radius_audit_log entry before deleting it
radius_audit_log_cleanup_window=30D
#
# maintenance.radius_audit_log_cleanup_interval
#
# At which interval to run the radius_audit_log cleanup job
radius_audit_log_cleanup_interval=60s
#
# maintenance.radius_audit_log_cleanup_batch
#
# How many radius_audit_log entries to clean up in one job
radius_audit_log_cleanup_batch=100
#
# maintenance.radius_audit_log_cleanup_timeout
#
# How long a radius_audit_log cleanup job can take before being killed
radius_audit_log_cleanup_timeout=10s
#
# maintenance.node_cleanup_window
#
# How long to keep a node entry before deleting it
node_cleanup_window=0D
#
# maintenance.node_cleanup_interval
#
# node cleanup interval
node_cleanup_interval=60s
#
# maintenance.person_cleanup
#
# Users that do not own any device will be deleted.
# Locally created users will only be deleted when their account expires.
person_cleanup=disabled
#
# maintenance.person_cleanup_interval
#
# person cleanup interval
person_cleanup_interval=60s
#
# maintenance.nodes_maintenance_interval
#
# nodes maintenance interval
nodes_maintenance_interval=60s
#
# maintenance.online_node_count_interval
#
# Interval at which PacketFence updates the online node count
online_node_count_interval=15m
#
# maintenance.violation_maintenance_interval
#
# violation maintenance interval
violation_maintenance_interval=60s
#
# maintenance.violation_maintenance_batch
#
# violation maintenance batch
violation_maintenance_batch=1000
#
# maintenance.violation_maintenance_timeout
#
# violation maintenance timeout
violation_maintenance_timeout=10s
#
# maintenance.inline_accounting_maintenance_interval
#
# inline accounting maintenance interval
inline_accounting_maintenance_interval=60s
#
# maintenance.acct_maintenance_interval
#
# acct maintenance interval
acct_maintenance_interval=60s
#
# maintenance.provisioning_compliance_poll_interval
#
# Interval at which PacketFence runs the polling enforcement on the provisioners
provisioning_compliance_poll_interval=300s
#
# maintenance.fingerbank_data_update_interval
#
# Interval at which PacketFence updates the local Fingerbank data from the cloud API
fingerbank_data_update_interval=6h

[active_active]
#
# active_active.password
#
# Shared KEY for vrrp protocol (Must be the same on all members).
password=1234
#
# active_active.virtual_router_id
#
# Shared KEY for vrrp protocol (Must be the same on all members).
virtual_router_id=50
#
# active_active.dns_on_vip_only
#
# Set the name server option in DHCP replies to point only to the VIP in cluster mode rather than to all servers in the cluster.
dns_on_vip_only=disabled
#
# active_active.centralized_deauth
#
# Centralize the deauthentication to the management node of the cluster.
centralized_deauth=enabled
#
# active_active.auth_on_management
#
# Process RADIUS authentication requests on the management server (the current load balancer).
# Disabling it will make the management server only proxy requests to other servers.
# Useful if your load balancer cannot handle both tasks.
# Changing this requires to restart radiusd.
auth_on_management=enabled

[monitoring]
#
# monitoring.graphite_host
#
graphite_host=localhost

#
# monitoring.graphite_port
#
graphite_port=2013

#
# monitoring.db_port
#
db_port=

#
# monitoring.db_host
#
db_host=

#
# monitoring.db_user
#
db_user=

#
# monitoring.db_pass
#
db_pass=

[metascan]
#
# metascan.api_key
#
# OPSWAT Metadefender Cloud Scanner API key
api_key=

#
# metascan.query_url_hash
#
# OPSWAT Metadefender Cloud Scanner URL for hash queries
query_url_hash=https://hashlookup.metascan-online.com/v2/hash/

[parking]
#
# parking.lease_length
#
# Lease length (in seconds) when a device is in parking
lease_length=3600
#
# parking.lease_length
#
# The threshold (in seconds) after which a device will be placed in parking
# A value of 0 deactivates the parking detection.
# The detection works by looking at the time in seconds a device has been in the registration role and comparing it with this threshold
threshold=0
#
# parking.place_in_dhcp_parking_group
#
# Place the device in the DHCP parking group when it is detected doing parking
place_in_dhcp_parking_group=enabled
#
# parking.show_parking_portal
#
# Show the parking portal to the device instead of the usual portal
show_parking_portal=enabled
